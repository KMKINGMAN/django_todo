[tox]
envlist = py310, py311, py312, lint, type-check, security, coverage
isolated_build = true
skipsdist = true

[testenv]
changedir = backend
deps =
    Django>=5.2.6
    djangorestframework>=3.16.1
    django-cors-headers>=4.8.0
    pytest>=8.0.0
    pytest-django>=4.8.0
    pytest-factoryboy>=2.6.0
    factory-boy>=3.3.0
    pytest-cov>=4.1.0
    python-dotenv>=1.0.0

setenv =
    DJANGO_SETTINGS_MODULE = todo_application.settings
    PYTHONPATH = {toxinidir}/backend
    SECRET_KEY = django-insecure-test-key-for-tox-environments-only
commands =
    python manage.py migrate --run-syncdb
    pytest {posargs}

[testenv:py310]
basepython = python3.10

[testenv:py311]
basepython = python3.11

[testenv:py312]
basepython = python3.12

[testenv:lint]
deps =
    flake8>=6.0.0
    flake8-django>=1.4
    black>=23.0.0
    isort>=5.12.0
commands =
    flake8 app tests todo_application
    black --check app tests todo_application manage.py
    isort --check-only app tests todo_application manage.py

[testenv:format]
deps =
    black>=23.0.0
    isort>=5.12.0
commands =
    black app tests todo_application manage.py
    isort app tests todo_application manage.py

[testenv:type-check]
deps =
    mypy>=1.0.0
    django-stubs>=4.2.0
    djangorestframework-stubs>=3.14.0
    types-requests
changedir = backend
commands =
    mypy --config-file=../mypy.ini app todo_application

[testenv:security]
deps =
    bandit>=1.7.0
    safety>=2.3.0
changedir = backend
commands =
    bandit -r app todo_application -f json -o ../bandit-report.json
    bandit -r app todo_application
    safety check

[testenv:coverage]
deps =
    {[testenv]deps}
    coverage>=7.0.0
    pytest-cov>=4.1.0
changedir = backend
commands =
    coverage erase
    pytest --cov=app --cov=todo_application --cov-report=html --cov-report=term-missing --cov-fail-under=80
    coverage report

[testenv:docs]
deps =
    sphinx>=6.0.0
    sphinx-rtd-theme>=1.2.0
    sphinx-autodoc-typehints>=1.19.0
changedir = {toxinidir}
commands =
    sphinx-build -b html docs docs/_build/html

[testenv:django-check]
changedir = backend
deps = {[testenv]deps}
commands =
    python manage.py check
    python manage.py check --deploy
    python manage.py makemigrations --check --dry-run

[testenv:integration]
changedir = backend
deps = {[testenv]deps}
commands =
    python manage.py migrate --run-syncdb
    pytest tests/test_integration.py -v {posargs}

[testenv:api-tests]
changedir = backend
deps = {[testenv]deps}
commands =
    python manage.py migrate --run-syncdb
    pytest tests/test_*_api.py -v {posargs}

[testenv:unit-tests]
changedir = backend
deps = {[testenv]deps}
commands =
    python manage.py migrate --run-syncdb
    pytest tests/test_models.py -v {posargs}

[testenv:fast]
changedir = backend
deps = {[testenv]deps}
commands =
    pytest -x --tb=short {posargs}

[flake8]
max-line-length = 88
exclude = 
    */migrations/*,
    */venv/*,
    */env/*,
    __pycache__,
    .tox,
    .git,
    node_modules
extend-ignore = 
    E203,
    W503,
per-file-ignores =
    */settings.py:E501,F401
    */tests/*.py:F401,F811

[coverage:run]
source = app, todo_application
omit = 
    */migrations/*,
    */venv/*,
    */env/*,
    */tests/*,
    manage.py,
    */settings.py,
    */wsgi.py,
    */asgi.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError

[pytest]
DJANGO_SETTINGS_MODULE = todo_application.settings
python_files = tests.py test_*.py *_tests.py
addopts = -v --tb=short --strict-markers
testpaths = tests
markers =
    unit: marks tests as unit tests
    integration: marks tests as integration tests
    api: marks tests as API tests


[testenv:pylint]
changedir = backend
deps =
    {[testenv]deps}
    pylint>=2.0.0
    pylint-django>=2.5.0
setenv =
    DJANGO_SETTINGS_MODULE = todo_application.settings
    PYTHONPATH = {toxinidir}/backend
commands =
    pylint --rcfile=.pylintrc app tests todo_application
